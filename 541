#include <bits/stdc++.h>
using namespace std;

using ll  = long long;
using ull = unsigned ll;
using ld  = long double;
using pi  = pair<int, int>;
using pii = pair<ll, ll>;
using vi  = vector<int>;
using vii = vector<ll>;
using vip = vector<pair<int, int>>;

bool cmp(const pair<int,int>&p1,const pair<int,int>& p2){
    if(p1.first>p2.first) return 1;
    else if(p1.first==p2.first) return (p1.second<p2.second);
    return 0;
}


const int MAX = 1e6 + 123;
const ll mod = 1e9 + 7;
const ll INF = 1e9;

#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;

typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// change ll to any data type
/// less_equal for multiset increasing order
/// less for set increasing order
/// greater_equal for multiset decreasing order
/// greater for set decreasing order

/// cout<<*X.find_by_order(1)<<endl; // iterator to the k-th largest element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define PI           3.141592653589793238
#define fir          first
#define sec          second
#define endl         '\n'
#define all(x)       (x).begin(),(x).end()
#define rall(x)      (x).rbegin(),(x).rend()
#define pb           push_back

#define mid(l,r)     ((r+l)/2)
#define left(node)    (node*2)
#define right(node)   (node*2+1)
#define loop(i,n,x)  for(int i=n;i<x;i++)
#define sz(a)        ((int) (a).size())
#define For(n,x)     for(int i=1;i<=x;i++)
#define ite          iterator it
#define fast         ios_base::sync_with_stdio(false);cin.tie(NULL);
#define test         ll t;cin>>t; while(t--){solve();}
#define in           insert
#define mx_int_prime  999999937

#define ms(a,x)      memset(a, x, sizeof(a))
#define gcd(a,b)     __gcd(a,b)
#define sqr(a)       ((a) * (a))
#define optimize()    ios_base::sync_with_stdio(0);

#define dbg(args...)  do {cerr << #args << " : "; faltu(args); } while(0)

long long gcd(long long a,long long b){

    return __gcd(a,b);
}

long long lcm(long long a,long long b){

    return a*(b/gcd(a,b));
}


void InputOutput(){
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
}
void solve()
{
    int n;
    while(cin>>n){
    int a[100][100]={0},rs[100]={0},cs[100]={0},r=0,c=0,c1=0,c2=0;

    if(n==0) break;

    for(int i=0;i<n;i++){

      for(int j=0;j<n;j++){

        cin>>a[i][j];
        rs[i]+=a[i][j];
        cs[j]+=a[i][j];

        }
    }
    for(int i=0;i<n;i++){
        if(rs[i]%2!=0){
            c1++;
            r=i;

        }
         if(cs[i]%2!=0){
            c2++;
            c=i;

        }
        if(c1+c2>2) break;
    }

    if(c1==0 && c2==0) cout<<"OK"<<endl;
    else if(c1==1 && c2==1) cout<<"Change bit ("<<r+1<<","<<c+1<<")"<<endl;
    else if(c1>1 || c2>1) cout<<"Corrupt"<<endl;

}

}

int main()
{
    optimize();
   // int t; cin>>t;
  //  while(t--)
    {
        solve();
    }

    return 0;
}
